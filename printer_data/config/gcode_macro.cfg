[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(105)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}
    # led_chassis_off
    # led_chassis_on
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=MCU TARGET=55
    G90
    {action_respond_info("Print Starting")}
    SET_DISPLAY_TEXT MSG="Print Starting!"

    m104 S145                                                                         # start heating nozzle dont wait
    M140 S{BED_TEMP}                                                                  # start heating bed dont wait
    M190 S{BED_TEMP}                                                                  # wait for bed temperature before next step
    # M109 S145                                                                         # sets the nozzle temperature to prevent bed damage on probes
    CLEAN_NOZZLE
    G32                                                                               # home all,sync motors and level z
    BED_MESH_CLEAR                                                                    # clear current mesh
    SET_VELOCITY_LIMIT ACCEL=20000 SQUARE_CORNER_VELOCITY=20                          # set accels for meshing 
    BED_MESH_CALIBRATE ADAPTIVE=1                                                     # start bedmesh calibrate
    G4 P500                                                                           # wait required to prevent MCU overload / inconsistant mesh calculation
    SET_VELOCITY_LIMIT ACCEL=20000 SQUARE_CORNER_VELOCITY=20                          # speed accels back up for purge travel
    M109 S145                                                                         # sets the nozzle temperature to prevent bed damage on probes
    CLEAN_NOZZLE
    CARTOGRAPHER_TOUCH_HOME
    PURGE_NOZZLE EXTRUDER_TEMP={EXTRUDER_TEMP}                                        # Purge + clean nozzle 
    # SMART_PARK                                                                      # park the printhead near the print area
    # M109 S{EXTRUDER_TEMP}                                                           # wait for nozzle temperature before next step
    {action_respond_info("Happy Printing~")}
    SET_DISPLAY_TEXT MSG="Happy Printing~"



[gcode_macro purge_old]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
	SET_DISPLAY_TEXT MSG="Heating Nozzle: {EXTRUDER_TEMP}c & Purging"
	G0 X10 Y3 F15000                                     # Moves to starting point
	G0 Z0.8                                              # Raises Z to 0.8
	M109 S{EXTRUDER_TEMP}                                # Heats the nozzle to printing temp
	G91                                                  # Incremental positioning 
    G1 X90 Z0.2 E90 F500                                # Purge line
    G90                                                  # Absolut position
    G0 X65 Y5 F15000
    G0 X66 Y6 z5 F20000
    G0 X172.5 Y181.5 z5 F25000

[gcode_macro PRINT_END]
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=MCU TARGET=70
    SET_VELOCITY_LIMIT ACCEL=20000 SQUARE_CORNER_VELOCITY=20
    M400                           ; wait for buffer to clear
    G91                            ; relative positioning
    G1 E-4.0 F3000                 ; retract filament
    G92 E0                         ; zero the extruder
    G0 Z1.00 X20.0 Y20.0 F10000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan

    # Check if the bed is below Z300 and move down by 5mm
    {% set z_pos = printer.toolhead.position.z|float %}
    {% if z_pos < 300 %}
      G1 Z5 F1200                  ; move down 5mm
    {% else %}
      {action_respond_info("Z position is above 300, skipping Z move.\n")}
    {% endif %}

    G90                            ; absolute positioning
    PARK
    # BED_MESH_CLEAR
    #led here
    #led here
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Exhaust TARGET=60
    # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Bedfans TARGET=0
    g10                                                                                   # retract
    {action_respond_info("Print Complete!")}
    SET_DISPLAY_TEXT MSG="Print Complete!"
    led_chassis_off                                                                       # reset led status
    led_chassis_dim                                                                       # set chassis led's to dim
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=20
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_CANCEL
    G10
    G92 E0                         ; zero the extruder
    M107                           ; turn off fan
    G91                            ; relative positioning
    G1 E-4.0 F3000                 ; retract filament
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    PARK
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SET_VELOCITY_LIMIT ACCEL=20000 SQUARE_CORNER_VELOCITY=20
    RESTORE_GCODE_STATE NAME=STATE_PRINT_CANCEL MOVE=0
   #led here
    # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Bedfans TARGET=10
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Exhaust TARGET=60
    led_chassis_off                                                                       # reset led status
    led_chassis_dim                                                                       # set chassis led's to dim
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=MCU TARGET=70
    {action_respond_info("Print Cancelled!")}
    SET_DISPLAY_TEXT MSG="Print Cancelled!"
    SDCARD_RESET_FILE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   # z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              # set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    # set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                    # disable filament switch sensor 
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                   # disable filament encoder sensor
        SET_PIN PIN=Buffer VALUE=0                                                           # disable filament buffer system
        SAVE_GCODE_STATE NAME=PAUSE                                                          # save current print position for resume
        BASE_PAUSE                                                                           # pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       # check that zhop doesn't exceed z max
            G91                                                                              # relative positioning
            G1 Z{z} F900                                                                     # move Z by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  # if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  # absolute positioning
        Park                                                                                 # park toolhead
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      # save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              # turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=604800                                                      # set timeout to 1 week
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                              # hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                                # enable filament switch sensor 
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                               # enable filament encoder sensor
        SET_PIN PIN=Buffer VALUE=1                                                       # enable filament buffer system
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      # set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                            # wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=600                         # go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                              # relative positioning
        M83                                                                              # relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                    # prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                         # lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
       PURGE_NOZZLE EXTRUDER_TEMP={EXTRUDER_TEMP}                                        # Purge + clean nozzle
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=600                             # restore position
        BASE_RESUME                                                                      # resume print
    {% endif %}

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
        "PPS-CF"    : ( 1.29, 1.70 ),  # 1.80 - 2.40
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=🔥 MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=🔥 MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}

[gcode_macro mpc_extruder]
gcode:
 MPC_CALIBRATE HEATER=extruder TARGET=285 FAN_BREAKPOINTS=7

[gcode_macro nozzleadxlshit]
gcode:
 SET_KINEMATIC_POSITION Z=50
 G28 X Y
 sync_motors
 
[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}

[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
    {% if not printer.motors_sync.applied %}
    sync_motors
  {% else %}
    {action_respond_info("Motors already synchronized")}
  {% endif %}
    # PROBE_SWITCH METHOD=SCAN
    Z_TILT_ADJUST
    G28 Z
    G90
    G0 X172.5 Y177.5 Z10 F18000

[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_BASE
gcode:
    Z_TILT_ADJUST_BASE horizontal_move_z=5 retry_tolerance=0.0075
    Z_TILT_ADJUST_BASE horizontal_move_z=2

[gcode_macro motor_amps]
description: change motor amperage on the fly
gcode:
 SET_TMC_CURRENT STEPPER=stepper_x CURRENT={params.CURRENT|default(1.8)}
 SET_TMC_CURRENT STEPPER=stepper_y CURRENT={params.CURRENT|default(1.8)}
 SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={params.CURRENT|default(1.8)}
 SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={params.CURRENT|default(1.8)}

[gcode_macro Park]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28 X Y
 {% endif %}
 G90
 G0 X172.5 Y300 F30000             # park nozzle at rear

[gcode_macro M106]    #aux fan control
rename_existing: G106
gcode:
    {% set P = params.P | default(0) | int %}
    {% set S = params.S | default(255) | int %}
    {% if P == 0 %}
        G106 S{S}
    {% else %}
        {% set fan = "Aux-Fans" if P == 2 %}
        SET_FAN_SPEED FAN={fan} SPEED={S / 255}
    {% endif %}

[gcode_macro M107]
rename_existing: G107
gcode:
    {% set fan = params.P|default(1)|int %}
	{% if fan == 2 %}
		SET_FAN_SPEED FAN=Aux-Fans SPEED=0
	{% else %}
	  SET_FAN_SPEED FAN=Aux-Fans SPEED=0  
	  G107
	{% endif %}

[gcode_macro load_filament]
description: set nozzle temp to 245 unless defined and extrude 50mm
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
    M104 S{EXTRUDER_TEMP}                               #start heating nozzle dont wait
    M83
    G1 E80.0 F400                                       # load 80mm of filament 
    m82
    
[gcode_macro FORM_TIP]
description: creates a pointed tip when removing filament
gcode:
      {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
      M109 S{EXTRUDER_TEMP}                               #heat nozzle and wait
      G91
      G0 E15 F360
      G0 E5 F3600
      G0 E-22 F3600 
      G0 E2 F300
      G0 E-2.1 F300
      G0 E2 F300
      G0 E-2.2 F300
      G0 E2 F300
      G0 E-2.3 F300
      G0 E2 F300
      G0 E-2.4 F300
      G0 E2 F300
      G0 E-2.5 F300
      G0 E2 F300
      G0 E-43 F300                                                               
      G0 E-100 F3600

[gcode_macro M141]
gcode:
    {% set s = params.s|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="Exhaust" TARGET={params.S}

[gcode_macro M191]
variable_chambertargettemp: 0
gcode:
    SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={params.S}                   ; set target temp for reference outside of the macro (for the loop)
    
    {% if not printer[SENSOR="heater_generic chamber"].temperature >= S|int %}                 ; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
        { action_respond_info("Chamber not at temp yet, pausing...") }
            {% if not printer.pause_resume.is_paused %}
                PAUSE                                                                   ; pause if not already paused
            {% endif %}
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=5                                   ; start wait loop
    {% else %}
        { action_respond_info("Chamber at or above temp, continuing...") }             ; ##IF CHAMBER TEMP IS ALREADY REACHED##
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=0                                   ; break wait loop if it happens to be running already (shouldn't be)
        {% if printer.pause_resume.is_paused %}
            RESUME                                                                       ; resume if paused (shouldn't be)
        {% endif %}
    {% endif %}

#This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-Wait]
gcode:
    {% if printer[SENSOR="heater_generic chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|int %} ; ##IF CHAMBER TEMP IS REACHED##
        { action_respond_info("Chamber at or above temp, continuing...") }
            {% if printer.pause_resume.is_paused %}
                RESUME                                                                                                        ; break loop, resume print
            {% endif %}
    {% else %}                                                                                                             ; ##IF CHAMBER TEMP IS NOT YET REACHED##
        { action_respond_info("Chamber not at temp yet, waiting...") }
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=5                                                                        ; continue waiting loop
    {% endif %}





[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }



[gcode_macro DATA_SAMPLE]
gcode:
  {% set bed_temp = params.BED_TEMP|default(90)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set min_temp = params.MIN_TEMP|default(40)|int %}
  {% set max_temp = params.MAX_TEMP|default(70)|int %}
  G90
  M106 S255
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={min_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"